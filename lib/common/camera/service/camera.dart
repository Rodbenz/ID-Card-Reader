// ignore_for_file: unused_import

import 'dart:io';
import 'package:image_picker/image_picker.dart';
import 'package:flutter/material.dart';

class Camera {
  final ImagePicker _picker = ImagePicker();

  Future<String?> openCamera(BuildContext context) async {
    try {
      final XFile? picture = await _picker.pickImage(source: ImageSource.camera);
      if (picture != null) {

        print('ü•©ü•©ü•©ü•©ü•© ${picture.path} ü•©ü•©ü•©ü•©ü•©');

        return picture.path; // ‡∏™‡πà‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ñ‡πà‡∏≤‡∏¢‡∏°‡∏≤‡∏Å‡∏•‡∏±‡∏ö
      }
    } catch (e) {
      print('Error opening camera: $e');
    }
    return null;
  }
}

class CameraWidget extends StatefulWidget {
  final String labelText;

  const CameraWidget({super.key, required this.labelText});

  @override
  _CameraWidgetState createState() => _CameraWidgetState();
}

class _CameraWidgetState extends State<CameraWidget> {
  late String _imageFilePath = '';

  void _openCamera() async {
    Camera camera = Camera();
    String? imagePath = await camera.openCamera(context);
    if (imagePath != null) {
      
      setState(() {
        _imageFilePath = imagePath; // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ñ‡πà‡∏≤‡∏¢‡∏°‡∏≤
      });

      print('üçôüçôüçôüçôüçôüçôüçôüçôüçôüçôüçôüçô $_imageFilePath üçôüçôüçôüçôüçôüçôüçôüçôüçôüçôüçôüçô');

    }
  }

  void _showDialog() {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß'),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Image.file(File(_imageFilePath)),
              const SizedBox(height: 16),
              Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  ElevatedButton(
                    onPressed: () {
                      Navigator.pop(context); // ‡∏õ‡∏¥‡∏î AlertDialog
                      _openCamera(); // ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà
                    },
                    child: const Text(
                      '‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà',
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.w600,
                        color: Colors.black,
                      ),
                    ),
                  ),
                  const SizedBox(width: 16),
                  ElevatedButton(
                    onPressed: () {
                      Navigator.pop(context); // ‡∏õ‡∏¥‡∏î AlertDialog
                      _openCamera(); // ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà
                    },
                    child: const Text(
                      '‡∏ï‡∏Å‡∏•‡∏á',
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.w600,
                        color: Colors.black,
                      ),
                    ),
                  ),
                  const SizedBox(width: 16),
                  ElevatedButton(
                    onPressed: () {
                      Navigator.pop(context); // ‡∏õ‡∏¥‡∏î AlertDialog
                    },
                    child: const Text(
                      '‡∏õ‡∏¥‡∏î',
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.w600,
                        color: Colors.black,
                      ),
                    ),
                  ),
                ],
              ),
            ],
          ),
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Padding(
          padding: const EdgeInsets.all(8.0),
          child: Text(
            widget.labelText,
            style: const TextStyle(
              fontSize: 20,
              fontWeight: FontWeight.bold,
            ),
          ),
        ),
        Padding(
          padding: const EdgeInsets.all(8.0),
          child: GestureDetector(
            onTap: () {
              _openCamera(); // ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á
            },
            child: Container(
              width: MediaQuery.of(context).size.width,
              height: 200,
              decoration: BoxDecoration(
                border: Border.all(
                  color: Colors.black45,
                  width: 1,
                ),
                borderRadius: BorderRadius.circular(5),
                image: _imageFilePath.isNotEmpty
                    ? DecorationImage(
                        image: FileImage(
                            File(_imageFilePath)), // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ñ‡πà‡∏≤‡∏¢‡∏°‡∏≤
                        fit: BoxFit.cover,
                      )
                    : null,
              ),
              child: _imageFilePath.isEmpty
                  ? const Icon(
                      Icons.camera_alt,
                      size: 80,
                      color: Colors.black,
                    )
                  : null,
            ),
          ),
        ),
        const SizedBox(height: 16),
        ElevatedButton(
          onPressed: _showDialog, // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á AlertDialog
          child: const Text(
            '‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ',
            style: TextStyle(
              fontSize: 16,
              fontWeight: FontWeight.w600,
              color: Colors.white,
            ),
          ),
        ),
      ],
    );
  }
}